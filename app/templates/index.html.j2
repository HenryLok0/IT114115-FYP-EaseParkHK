{% extends "base.html.j2" %}
{% import 'bootstrap/wtf.html' as wtf %}
{% block head %}
<title>EaseParkHK</title>
<link rel="icon" href="{{ url_for('static', filename='favicon.ico') }}" type="image/x-icon">
{% endblock %}
{% block app_content %}
{% include "special_traffic_news.html.j2" %}
    <div class="container mt-5">
        <h1 class="text-center mb-4">Car Park Information</h1>
        
        
        <!-- Filter Options -->
        <div class="form-group">
            <label for="vehicle-type">Vehicle Type:</label>
            <select id="vehicle-type" class="form-control" onchange="filterCarParks()">
                <option value="privateCar">Private Car</option>
                <option value="motorCycle">Motor Cycle</option>
                <option value="HGV">Heavy Goods Vehicle</option>
                <option value="LGV">Large Goods Vehicle</option>
                <option value="coach">Coach</option>
            </select>
        </div>
        <div class="form-group">
            <label for="status-filter">Status:</label>
            <select id="status-filter" class="form-control" onchange="filterCarParksByStatus()">
                <option value="all">All</option>
                <option value="OPEN">Open</option>
                <option value="CLOSED">Closed</option>
            </select>
        </div>

        {% if favorite_carparks %}
        <h2>Favorite Car Parks</h2>
        <table class="table table-striped table-hover mt-4">
            <thead class="thead-dark">
                <tr>
                    <th onclick="sortTable(0)">Name <span class="sort-icon">&#x25B2;</span></th>
                    <th onclick="sortTable(1)">Address <span class="sort-icon">&#x25B2;</span></th>
                    <th onclick="sortTable(2)">Opening Status <span class="sort-icon">&#x25B2;</span></th>
                    <th onclick="sortTable(3)">Vacancy <span class="sort-icon">&#x25B2;</span></th>
                    <th>Detail</th>
                    <th>Location</th>
                    <th>Favorite</th>
                </tr>
            </thead>
            <tbody id="favorite-carpark-table">
                {% for carpark in favorite_carparks %}
                    {% for vehicle_type in ['privateCar', 'motorCycle', 'LGV', 'HGV', 'coach'] %}
                        {% set vacancy = carpark[vehicle_type ~ '_vacancy'] %}
                        {% if vacancy not in ['N/A', 'none', '-1', '0'] %}
                            <tr data-vehicle-type="{{ vehicle_type }}" data-park-id="{{ carpark.park_Id }}">
                                <td>{{ carpark.name }}</td>
                                <td>{{ carpark.displayAddress }}</td>
                                <td>{{ carpark.opening_status }}</td>
                                <td>{{ vacancy }}</td>
                                <td>
                                    <a href="{{ url_for('carpark_detail', park_id=carpark.park_Id) }}" class="btn btn-info btn-sm">Details</a>
                                </td>
                                <td>
                                    <button class="btn btn-primary btn-sm" onclick="showMap('{{ carpark.latitude }}', '{{ carpark.longitude }}', '{{ carpark.name }}', '{{ carpark.displayAddress }}', '{{ carpark.opening_status }}', '{{ vacancy }}', '{{ vehicle_type }}')">
                                        Map
                                    </button>
                                </td>
                                <td>
                                    <button class="btn btn-warning btn-sm" onclick="toggleFavorite('{{ carpark.park_Id }}')">
                                        Unfavorite
                                    </button>
                                </td>
                            </tr>
                        {% endif %}
                    {% endfor %}
                {% endfor %}
            </tbody>
        </table>
        {% endif %}

        <h2>All Car Parks</h2>
        <table class="table table-striped table-hover mt-4">
            <thead class="thead-dark">
                <tr>
                    <th onclick="sortTable(0)">Name <span class="sort-icon">&#x25B2;</span></th>
                    <th onclick="sortTable(1)">Address <span class="sort-icon">&#x25B2;</span></th>
                    <th onclick="sortTable(2)">Opening Status <span class="sort-icon">&#x25B2;</span></th>
                    <th onclick="sortTable(3)">Vacancy <span class="sort-icon">&#x25B2;</span></th>
                    <th>Detail</th>
                    <th>Location</th>
                    <th>Favorite</th>
                </tr>
            </thead>
            <tbody id="carpark-table">
                {% for carpark in carparks %}
                    {% for vehicle_type in ['privateCar', 'motorCycle', 'LGV', 'HGV', 'coach'] %}
                        {% set vacancy = carpark[vehicle_type ~ '_vacancy'] %}
                        {% if vacancy not in ['N/A', 'none', '-1', '0'] %}
                            <tr data-vehicle-type="{{ vehicle_type }}" data-park-id="{{ carpark.park_Id }}">
                                <td>{{ carpark.name }}</td>
                                <td>{{ carpark.displayAddress }}</td>
                                <td>{{ carpark.opening_status }}</td>
                                <td>{{ vacancy }}</td>
                                <td>
                                    <a href="{{ url_for('carpark_detail', park_id=carpark.park_Id) }}" class="btn btn-info btn-sm">Details</a>
                                </td>
                                <td>
                                    <button class="btn btn-primary btn-sm" onclick="showMap('{{ carpark.latitude }}', '{{ carpark.longitude }}', '{{ carpark.name }}', '{{ carpark.displayAddress }}', '{{ carpark.opening_status }}', '{{ vacancy }}', '{{ vehicle_type }}')">
                                        Map
                                    </button>
                                </td>
                                <td>
                                    <button class="btn btn-warning btn-sm" onclick="toggleFavorite('{{ carpark.park_Id }}')">
                                        {{ 'Unfavorite' if carpark.park_Id in favorite_carparks else 'Favorite' }}
                                    </button>
                                </td>
                            </tr>
                        {% endif %}
                    {% endfor %}
                {% endfor %}
            </tbody>
        </table>
        By continuing to use, you agree to EaseParkHK's <a href="/privacy_policy">{{ _('Privacy Policy') }}</a>
        <p id="no-results" class="text-center text-danger font-weight-bold mt-4" style="display: none;">
            No results found. Please adjust your filters or try again.
        </p>
        
        <!-- Map Modal -->
        <div id="map-modal" class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <iframe id="map" width="100%" height="400px" frameborder="0" style="border:0" allowfullscreen></iframe>
                        <p id="carpark-name" class="mt-3"></p>
                        <p id="carpark-address"></p>
                        <p id="carpark-status"></p>
                        <p id="carpark-vacancy"></p>
                    </div>
                </div>
            </div>
        </div>



        <!-- Chatbox Popup -->
        <div id="chatbox-popup" class="chatbox-popup">
            <div class="chatbox-header">
                <h5 class="mb-0">AI Chatbox Room</h5>
                <button class="btn btn-sm btn-danger" onclick="toggleChatbox()">Close</button>
            </div>
            <iframe src="{{ url_for('ai_chatbox') }}" width="100%" height="100%" frameborder="0"></iframe>
        </div>
    </div>
    
    <style>
        .chatbox-popup {
            position: fixed;
            bottom: 70px;
            right: 20px;
            width: 300px;
            height: 400px;
            background: white;
            border: 1px solid #ccc;
            border-radius: 10px;
            display: none;
            z-index: 1000;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .chatbox-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background: #007bff;
            color: white;
            border-bottom: 1px solid #ccc;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
        }
        .chatbox-header h5 {
            margin: 0;
        }
        /* Existing styles... */
    
        /* Dark mode styles for map modal and chatbox */
        body.dark-mode .modal-content {
            background-color: #1e1e1e;
            border-color: #444;
        }
        
        body.dark-mode .modal-header {
            border-bottom-color: #444;
        }
        
        body.dark-mode .modal-body {
            color: #e0e0e0;
        }
        
        body.dark-mode .close {
            color: #e0e0e0;
            text-shadow: 0 1px 0 #000;
        }
        
        body.dark-mode .chatbox-popup {
            background-color: #1e1e1e;
            border-color: #444;
        }
        
        body.dark-mode .chatbox-header {
            background-color: #375a72;
            border-color: #2e4b60;
        }
        
        /* Add a wrapper for the map iframe in dark mode */
        body.dark-mode .map-wrapper {
            position: relative;
        }
        
        /* Optional: Add a dark overlay for map iframe until clicked */
        body.dark-mode .map-wrapper::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.1);
            pointer-events: none;
        }
        /* Enhance the existing dark mode table styles */
        body.dark-mode .table.table-striped {
            color: #e0e0e0;
            background-color: #1e1e1e;
            border-color: #444;
        }
        
        body.dark-mode .table.table-striped tbody tr {
            background-color: #1e1e1e;
        }
        
        body.dark-mode .table.table-striped > tbody > tr:nth-of-type(odd) {
            background-color: #2a2a2a;
        }
        
        body.dark-mode .table.table-hover > tbody > tr:hover {
            background-color: #375a72 !important;
            color: #fff;
        }
        
        body.dark-mode .thead-dark th {
            background-color: #375a72 !important;
            color: white !important;
            border-color: #2e4b60 !important;
        }
        
        body.dark-mode .table.table-striped td,
        body.dark-mode .table.table-striped th {
            border-color: #444;
        }
        
        /* Ensure buttons in table maintain dark mode styling */
        body.dark-mode .table .btn-info {
            background-color: #2d6987;
            border-color: #265a74;
        }
        
        body.dark-mode .table .btn-primary {
            background-color: #375a72;
            border-color: #2e4b60;
        }
        
        body.dark-mode .table .btn-warning {
            background-color: #8a6d3b;
            border-color: #785f33;
        }
        
        /* Fix for sort icons in dark mode */
        body.dark-mode .sort-icon {
            color: #ffffff;
        }
        /* Additional specific styles for buttons in tables */
        body.dark-mode .table .btn-warning {
            background-color: #8a6d3b !important;
            border-color: #785f33 !important;
            color: white !important;
        }
        
        body.dark-mode .table .btn-warning:hover {
            background-color: #9d7e45 !important;
            border-color: #8a6d3b !important;
        }
        
        body.dark-mode .table .btn-info {
            background-color: #2d6987 !important;
            border-color: #265a74 !important;
            color: white !important;
        }
        
        body.dark-mode .table .btn-info:hover {
            background-color: #357a9e !important;
            border-color: #2d6987 !important;
        }
        
        body.dark-mode .table .btn-primary {
            background-color: #375a72 !important;
            border-color: #2e4b60 !important;
            color: white !important;
        }
        
        body.dark-mode .table .btn-primary:hover {
            background-color: #446b86 !important;
            border-color: #375a72 !important;
        }
    </style>

    <script>
        let sortOrder = [true, true, true, true]; // true for ascending, false for descending

        function filterCarParks() {
            const vehicleType = document.getElementById('vehicle-type').value;

            const rows = Array.from(document.querySelectorAll('#carpark-table tr'));
            let visible = false;

            rows.forEach(row => {
                const rowVehicleType = row.dataset.vehicleType;
                const vacancy = parseInt(row.querySelector('td:nth-child(4)').innerText) || 'N/A';

                // Determine if the row matches the vehicle type filter and has valid vacancy
                const matchesVehicleType = (vehicleType === 'all' || rowVehicleType === vehicleType);
                const hasValidVacancy = vacancy && vacancy > 0;

                if (matchesVehicleType && hasValidVacancy) {
                    row.style.display = '';
                    visible = true;
                } else {
                    row.style.display = 'none';
                }
            });

            // Show or hide "No Results" message
            document.getElementById('no-results').style.display = visible ? 'none' : 'block';
        }

        function sortTable(columnIndex) {
            const table = document.getElementById('carpark-table');
            const rows = Array.from(table.rows);
            const ascending = sortOrder[columnIndex];
            const sortedRows = rows.sort((a, b) => {
                const aText = a.cells[columnIndex]?.innerText || '';
                const bText = b.cells[columnIndex]?.innerText || '';
                return columnIndex === 3 ? (ascending ? parseInt(aText) - parseInt(bText) : parseInt(bText) - parseInt(aText)) : (ascending ? aText.localeCompare(bText) : bText.localeCompare(aText));
            });
            sortedRows.forEach(row => table.appendChild(row));
            sortOrder[columnIndex] = !ascending;

            // Update sort icons
            const headers = document.querySelectorAll('th');
            headers.forEach((header, index) => {
                const icon = header.querySelector('.sort-icon');
                if (icon) {
                    icon.innerHTML = sortOrder[index] ? '&#x25B2;' : '&#x25BC;';
                }
            });
        }

        function showMap(lat, long, name, address, status, vacancy, vehicleType) {
            const mapModal = document.getElementById('map-modal');
            const mapFrame = document.getElementById('map');
            mapFrame.src = `https://www.google.com/maps?q=${lat},${long}&output=embed`;
            
            // Dynamically update map details
            document.getElementById('carpark-name').textContent = "Name: " + name;
            document.getElementById('carpark-address').textContent = "Address: " + address;
            document.getElementById('carpark-status').textContent = "Status: " + status;
            document.getElementById('carpark-vacancy').textContent = vehicleType.charAt(0).toUpperCase() + 
                vehicleType.slice(1).replace(/([A-Z])/g, ' $1') + " Vacancy: " + vacancy;
            
            // Check dark mode and apply styles before showing modal
            const isDarkMode = document.body.classList.contains('dark-mode');
            if (isDarkMode) {
                applyDarkModeToElements();
            }
            
            $('#map-modal').modal('show');
        }

        function closeMap() {
            $('#map-modal').modal('hide');
        }

        function toggleFavorite(parkId) {
            fetch(`/toggle_favorite/${parkId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(response => response.json())
              .then(data => {
                  if (data.success) {
                      location.reload();
                  }
              });
        }

        function toggleChatbox() {
            const chatboxPopup = document.getElementById('chatbox-popup');
            chatboxPopup.style.display = chatboxPopup.style.display === 'none' ? 'block' : 'none';
        }

        window.onload = function() {
            filterCarParks(); // Initial filter
            sortTable(3); // Default sort by vacancy
            document.querySelector('th:nth-child(4)').click(); // Simulate click on "Vacancy" column header
        };
        function filterCarParksByStatus() {
            const status = document.getElementById('status-filter').value;
            const rows = Array.from(document.querySelectorAll('#carpark-table tr'));
            let visible = false;

            rows.forEach(row => {
                const rowStatus = row.querySelector('td:nth-child(3)').innerText.trim();
                const matchesStatus = (status === 'all' || rowStatus === status);

                if (matchesStatus) {
                    row.style.display = '';
                    visible = true;
                } else {
                    row.style.display = 'none';
                }
            });

            document.getElementById('no-results').style.display = visible ? 'none' : 'block';
        }
        
        // Add this after your existing toggleChatbox function
    
        // Apply dark mode to dynamic elements
        function applyDarkModeToElements() {
            const isDarkMode = document.body.classList.contains('dark-mode');
            
            // Apply dark mode to specific elements
            const modalContent = document.querySelector('.modal-content');
            const modalBody = document.querySelector('.modal-body');
            const chatboxPopup = document.getElementById('chatbox-popup');
            
            if (modalContent) {
                modalContent.style.backgroundColor = isDarkMode ? '#1e1e1e' : '';
                modalContent.style.borderColor = isDarkMode ? '#444' : '';
            }
            
            if (modalBody) {
                modalBody.style.color = isDarkMode ? '#e0e0e0' : '';
            }
            
            if (chatboxPopup) {
                chatboxPopup.style.backgroundColor = isDarkMode ? '#1e1e1e' : '';
                chatboxPopup.style.borderColor = isDarkMode ? '#444' : '';
            }
            
            // Apply dark mode to text elements in modal
            const textElements = ['carpark-name', 'carpark-address', 'carpark-status', 'carpark-vacancy'];
            textElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.style.color = isDarkMode ? '#e0e0e0' : '';
                }
            });
        }
        
        // Hook into map modal show event to apply dark mode
        $(document).ready(function() {
            $('#map-modal').on('shown.bs.modal', function() {
                applyDarkModeToElements();
            });
            
            // Also update when chatbox is toggled
            const originalToggleChatbox = toggleChatbox;
            toggleChatbox = function() {
                originalToggleChatbox();
                setTimeout(applyDarkModeToElements, 100); // Small delay to ensure DOM is updated
            };
        });
        
        // Enhance the window.onload function to include our dark mode updates
        const originalOnload = window.onload;
        window.onload = function() {
            if (originalOnload) {
                originalOnload();
            }
            
            // Check if dark mode is enabled and apply it to dynamic elements
            if (localStorage.getItem('darkMode') === 'enabled') {
                applyDarkModeToElements();
            }
            
            // Add observer for theme changes
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.attributeName === 'class' && 
                        mutation.target === document.body) {
                        applyDarkModeToElements();
                    }
                });
            });
            
            observer.observe(document.body, { attributes: true });
        };
        
        // Add this function to update all table elements for dark mode
        function updateTablesForDarkMode() {
            const isDarkMode = document.body.classList.contains('dark-mode');
            
            // Get all tables
            const tables = document.querySelectorAll('.table');
            tables.forEach(table => {
                // Apply dark mode classes explicitly
                if (isDarkMode) {
                    table.classList.add('dark-mode-table');
                    table.style.backgroundColor = '#1e1e1e';
                    table.style.color = '#e0e0e0';
                    table.style.borderColor = '#444';
                } else {
                    table.classList.remove('dark-mode-table');
                    table.style.backgroundColor = '';
                    table.style.color = '';
                    table.style.borderColor = '';
                }
            });
            
            // Apply dark mode to table headers
            const tableHeaders = document.querySelectorAll('.thead-dark th');
            tableHeaders.forEach(header => {
                if (isDarkMode) {
                    header.style.backgroundColor = '#375a72';
                    header.style.color = 'white';
                    header.style.borderColor = '#2e4b60';
                } else {
                    header.style.backgroundColor = '';
                    header.style.color = '';
                    header.style.borderColor = '';
                }
            });
            
            // Apply dark mode to table rows
            const tableRows = document.querySelectorAll('.table tbody tr');
            tableRows.forEach((row, index) => {
                if (isDarkMode) {
                    row.style.backgroundColor = index % 2 === 0 ? '#1e1e1e' : '#2a2a2a';
                    row.style.color = '#e0e0e0';
                    row.style.borderColor = '#444';
                } else {
                    row.style.backgroundColor = '';
                    row.style.color = '';
                    row.style.borderColor = '';
                }
            });
        }
        
        // Hook into existing functionality to call our new function
        document.addEventListener('DOMContentLoaded', function() {
            // Check if dark mode is enabled when page loads
            if (localStorage.getItem('darkMode') === 'enabled') {
                updateTablesForDarkMode();
            }
            
            // Set up observer to detect theme changes
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.attributeName === 'class' && 
                        mutation.target === document.body) {
                        updateTablesForDarkMode();
                    }
                });
            });
            
            observer.observe(document.body, { attributes: true });
        });
        
        // Update the original window.onload to include our table styling
        const existingWindowOnload = window.onload;
        window.onload = function() {
            if (existingWindowOnload) {
                existingWindowOnload();
            }
            
            // Initialize dark mode for tables if needed
            if (localStorage.getItem('darkMode') === 'enabled') {
                updateTablesForDarkMode();
            }
            
            // Get the theme toggle button and add our function to it
            const themeToggle = document.getElementById('theme-toggle');
            if (themeToggle) {
                const originalClickHandler = themeToggle.onclick;
                themeToggle.onclick = function(e) {
                    if (originalClickHandler) {
                        originalClickHandler.call(this, e);
                    }
                    // Apply updates after a small delay to ensure dark-mode class is toggled
                    setTimeout(updateTablesForDarkMode, 50);
                };
            }
        };
    </script>
            <!-- Chatbox Button -->
        <div id="chatbox-button" style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;">
            <button class="chatbox-btn" onclick="toggleChatbox()" aria-label="Chat with AI">
                <span class="chatbox-icon">&#128172;</span> <!-- Speech bubble emoji as an icon -->
            </button>
        </div>
        
        <!-- Chatbox Popup -->
        <div id="chatbox-popup" class="chatbox-popup">
            <div class="chatbox-header">
                <h5 class="mb-0">AI Chatbox Room</h5>
                <button class="btn btn-sm btn-danger" onclick="toggleChatbox()">Close</button>
            </div>
            <iframe src="{{ url_for('ai_chatbox') }}" width="100%" height="100%" frameborder="0"></iframe>
        </div>
        
        <style>
            /* Floating Action Button (FAB) Style for Chatbox Button */
            .chatbox-btn {
                background-color: #007bff;
                color: white;
                border: none;
                border-radius: 50%;
                width: 50px;
                height: 50px;
                display: flex;
                align-items: center;
                justify-content: center;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                cursor: pointer;
                transition: background-color 0.3s ease, transform 0.2s ease;
            }
        
            .chatbox-btn:hover {
                background-color: #0056b3;
                transform: scale(1.1);
            }
        
            .chatbox-btn:focus {
                outline: none;
                box-shadow: 0 0 0 4px rgba(0, 123, 255, 0.5);
            }
        
            .chatbox-icon {
                font-size: 1.5rem;
                line-height: 1;
            }
        
            /* Chatbox Popup */
            .chatbox-popup {
                position: fixed;
                bottom: 90px;
                right: 20px;
                width: 300px;
                height: 800px;
                background: white;
                border: 1px solid #ccc;
                border-radius: 10px;
                display: none;
                z-index: 1000;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                overflow: hidden;
            }
        
            .chatbox-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 10px;
                background: #007bff;
                color: white;
                border-bottom: 1px solid #ccc;
                border-top-left-radius: 10px;
                border-top-right-radius: 10px;
            }
        
            .chatbox-header h5 {
                margin: 0;
            }
            /* Existing styles... */
    
            /* Dark mode styles for map modal and chatbox */
            body.dark-mode .modal-content {
                background-color: #1e1e1e;
                border-color: #444;
            }
            
            body.dark-mode .modal-header {
                border-bottom-color: #444;
            }
            
            body.dark-mode .modal-body {
                color: #e0e0e0;
            }
            
            body.dark-mode .close {
                color: #e0e0e0;
                text-shadow: 0 1px 0 #000;
            }
            
            body.dark-mode .chatbox-popup {
                background-color: #1e1e1e;
                border-color: #444;
            }
            
            body.dark-mode .chatbox-header {
                background-color: #375a72;
                border-color: #2e4b60;
            }
            
            /* Add a wrapper for the map iframe in dark mode */
            body.dark-mode .map-wrapper {
                position: relative;
            }
            
            /* Optional: Add a dark overlay for map iframe until clicked */
            body.dark-mode .map-wrapper::after {
                content: "";
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.1);
                pointer-events: none;
            }
            /* Enhance the existing dark mode table styles */
            body.dark-mode .table.table-striped {
                color: #e0e0e0;
                background-color: #1e1e1e;
                border-color: #444;
            }
            
            body.dark-mode .table.table-striped tbody tr {
                background-color: #1e1e1e;
            }
            
            body.dark-mode .table.table-striped > tbody > tr:nth-of-type(odd) {
                background-color: #2a2a2a;
            }
            
            body.dark-mode .table.table-hover > tbody > tr:hover {
                background-color: #375a72 !important;
                color: #fff;
            }
            
            body.dark-mode .thead-dark th {
                background-color: #375a72 !important;
                color: white !important;
                border-color: #2e4b60 !important;
            }
            
            body.dark-mode .table.table-striped td,
            body.dark-mode .table.table-striped th {
                border-color: #444;
            }
            
            /* Ensure buttons in table maintain dark mode styling */
            body.dark-mode .table .btn-info {
                background-color: #2d6987;
                border-color: #265a74;
            }
            
            body.dark-mode .table .btn-primary {
                background-color: #375a72;
                border-color: #2e4b60;
            }
            
            body.dark-mode .table .btn-warning {
                background-color: #8a6d3b;
                border-color: #785f33;
            }
            
            /* Fix for sort icons in dark mode */
            body.dark-mode .sort-icon {
                color: #ffffff;
            }
        </style>
        
        <script>
            function toggleChatbox() {
                const chatboxPopup = document.getElementById('chatbox-popup');
                chatboxPopup.style.display = chatboxPopup.style.display === 'none' ? 'block' : 'none';
            }
        </script>
{% endblock %}